name: "Helm deploy Action"
description: "GitHub Action to install/upgrade services using Helm"
inputs:
  deploy_mode:
    description: |
      Deployment mode:
      - 'install' for clean installation
      - 'update' to upgrade an existing release
    required: true
    default: 'install'

  restricted:
    description: |
      - 'true': helm installation by user with restricted rights
      - 'false': helm installation by cluster admin user
    required: true
    default: 'false'
    type: boolean

  path_to_template:
    description: |
      Path to template file in qubership-test-pipelines repository
      Example: 'templates/consul-service/consul_clean_infra_passport.yml'
    required: true

  service_branch:
    description: |
      Branch in service repository
    required: true

  service_name:
    description: |
      Helm release name
    required: true

  repository_name:
    description: |
      Service repository name (without organization prefix)
      Example: 'qubership-consul' for https://github.com/Netcracker/qubership-consul
    required: true

  path_to_chart:
    description: |
      Path to helm chart within service repository
      Example: 'charts/helm/consul-service'
    required: true

  namespace:
    description: |
      Kubernetes namespace for service installation
    required: true

  helm_charts_release_config:
    description: |
      Path to helm-charts-release-config.yaml in pipeline repository
    required: true

  resource_folder:
    description: |
      Folder with resources for creating before installation
    required: true

runs:
  using: 'composite'
  steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        ref: '${{inputs.service_branch}}'
        repository: 'Netcracker/${{inputs.repository_name}}'
        path: '${{inputs.repository_name}}'

    - name: Create namespace
      if: inputs.deploy_mode == 'install'
      shell: bash
      # language=bash
      run: |
        if ! kubectl get namespace ${{inputs.namespace}} >/dev/null 2>&1; then
        kubectl create namespace ${{inputs.namespace}}
        else
        echo "Namespace '${{inputs.namespace}}' already exists"
        fi

    - name: Create resources
      if: inputs.resource_folder != ''
      shell: bash
      # language=bash
      run: |
        folder="${{inputs.resource_folder}}"
        files=($(find "$folder" -type f))
        echo $files
        for file in "${files[@]}"; do
          echo "Applying $file"
          kubectl create -f "$file"
        done

    - name: Create restricted resources
      if: inputs.restricted == 'true'  && inputs.deploy_mode == 'install'
      uses: ./qubership-testing-platform-environments-test-pipelines/actions/shared/create_restricted_resources
      with:
        service_name: ${{inputs.service_name}}
        repository_name: ${{inputs.repository_name}}
        path_to_chart: ${{inputs.path_to_chart}}
        namespace: ${{inputs.namespace}}

    - name: Name template
      shell: bash
      # language=bash
      run: |
        echo ${{inputs.path_to_template}}
        cp ./qubership-testing-platform-environments/.github/deploy_templates/values-dev.yaml ${{inputs.repository_name}}/${{inputs.path_to_chart}}
        ls -la
    #    ls -la
    #    cp ${{inputs.path_to_template}} ${{inputs.repository_name}}/${{inputs.path_to_chart}}

    - name: Check helm_charts_release_config file
      shell: bash
      # language=bash
      run: |
        file_path=$(echo ${{inputs.repository_name}}/.github/helm-charts-release-config.yaml)
        config_source=$(echo ${{inputs.helm_charts_release_config}})
        if [ -f "$file_path" ]; then
            echo "$file_path" exists in service repository
        else
            if cp "qubership-testing-platform-environments/$config_source" "$file_path"; then
                echo "Config file is missing in ${{inputs.service_name}} repository. Using config file from pipeline repository"
            else
                echo "File $config_source is not found in pipeline repository" >&2
                exit 1
            fi
        fi

    - name: Replace slash in service branch
      id: replace_slash
      shell: bash
      # language=bash
      run: |
        service_branch="${{inputs.service_branch}}"
        if [[ "${service_branch}" == *"/"* ]]; then
          service_branch_updated=$(echo "${service_branch}" | tr '/' '_')
        else
          service_branch_updated=${service_branch}
        fi
        echo ${service_branch_updated}
        echo "service_branch_updated=${service_branch_updated}" >> $GITHUB_OUTPUT

#    - name: Update versions in values
#      id: update-versions
#      uses: netcracker/qubership-workflow-hub/actions/helm-charts-release@main
#      with:
#        release-version: test_pipeline-20250714054521
#        config-file: .github/helm-charts-release-config.yaml
#        create-release-branch: "false"
#        version-replace-method: 'replace'
#        working-directory: ${{inputs.repository_name}}
#        chart-version: ${{github.run_number}}.${{github.run_attempt}}.${{github.run_id}}

    - name: Install Postgres
      shell: bash
      run: |
        helm repo add bitnami https://charts.bitnami.com/bitnami
        
        helm install my-postgres bitnami/postgresql -n ${{inputs.namespace}} \
          --set image.tag=14.2.0 \
          --set auth.username=postgres \
          --set auth.password=postgrestest \
          --set auth.database=postgres
        
        echo "Get pods $pod"
        kubectl get pods -n ${{inputs.namespace}}
        
        for pod in "${pods[@]}"; do
          if [[ $pod == *"my-postgres-postgresql"* ]]; then
            name_pod=$pod
          fi
        done
        if ! [[ $name_pod ]]; then
          echo There is no postgres pod
          exit 0
        fi
        echo "name_pod=$name_pod"
        
        for i in {1..10}; do
          echo attempt $i
          status=$(kubectl get pod $name_pod -n ${{inputs.namespace}} -o jsonpath="{.status.phase}")
          echo "$status"
          ready=$(kubectl get pod "$name_pod" -n ${{inputs.namespace}} -o jsonpath="{.status.containerStatuses[*].ready}")
          echo "$ready"
          if [[ "$status" == "Running" && "$ready" == "true" ]]; then
            break
          fi
          sleep 5
        done

    - name: Install/update service with helm
      shell: bash
      run: |
        # ▶️ ${{inputs.deploy_mode}} ${{inputs.service_name}} with Helm
        template_name=$(basename "${{inputs.path_to_template}}")
        echo $template_name
        cd ${{inputs.repository_name}}/${{inputs.path_to_chart}}
        
        helm ${{inputs.deploy_mode}} ${{inputs.service_name}} . -f values-dev.yaml -n ${{inputs.namespace}} --timeout 10m

    - name: Debug
      shell: bash
      if: always()
      run: |
        echo "Get pods $pod"
        kubectl get pods -n ${{inputs.namespace}}
        
        echo "Get values"
        helm get values atp-environments -n ${{inputs.namespace}} --all
        echo "End values"
        
        echo "Get logs for predeploy-install"
        kubectl logs $(kubectl get pods -n ${{inputs.namespace}} \
          --selector=job-name=${{inputs.service_name}}-predeploy-install \
          -o jsonpath='{.items[0].metadata.name}') -n ${{inputs.namespace}}
        echo "End logs"

    - name: Get docker images
      shell: bash
      # language=bash
      run: |
        # ▶️ Get docker images
        kubectl get pods -n ${{inputs.namespace}} -o go-template --template="{{range .items}}{{range .spec.containers}}{{.image}} {{end}}{{end}}"

    - name: Use default context
      if: inputs.restricted == 'true'
      shell: bash
      # language=bash
      run: kubectl config use-context kind-kind
